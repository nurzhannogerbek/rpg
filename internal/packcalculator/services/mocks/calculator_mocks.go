// Code generated by MockGen. DO NOT EDIT.
// Source: internal/packcalculator/services/calculator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "rpg/internal/packcalculator/models"

	gomock "github.com/golang/mock/gomock"
)

// MockPackCalculator is a mock of PackCalculator interface.
type MockPackCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockPackCalculatorMockRecorder
}

// MockPackCalculatorMockRecorder is the mock recorder for MockPackCalculator.
type MockPackCalculatorMockRecorder struct {
	mock *MockPackCalculator
}

// NewMockPackCalculator creates a new mock instance.
func NewMockPackCalculator(ctrl *gomock.Controller) *MockPackCalculator {
	mock := &MockPackCalculator{ctrl: ctrl}
	mock.recorder = &MockPackCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackCalculator) EXPECT() *MockPackCalculatorMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockPackCalculator) Calculate(quantity int) (models.RequiredPacks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", quantity)
	ret0, _ := ret[0].(models.RequiredPacks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate.
func (mr *MockPackCalculatorMockRecorder) Calculate(quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockPackCalculator)(nil).Calculate), quantity)
}
