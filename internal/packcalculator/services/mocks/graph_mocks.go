// Code generated by MockGen. DO NOT EDIT.
// Source: internal/packcalculator/services/graph.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	services "rpg/internal/packcalculator/services"

	gomock "github.com/golang/mock/gomock"
	graph "gonum.org/v1/gonum/graph"
)

// MockGraphQuantity is a mock of GraphQuantity interface.
type MockGraphQuantity struct {
	ctrl     *gomock.Controller
	recorder *MockGraphQuantityMockRecorder
}

// MockGraphQuantityMockRecorder is the mock recorder for MockGraphQuantity.
type MockGraphQuantityMockRecorder struct {
	mock *MockGraphQuantity
}

// NewMockGraphQuantity creates a new mock instance.
func NewMockGraphQuantity(ctrl *gomock.Controller) *MockGraphQuantity {
	mock := &MockGraphQuantity{ctrl: ctrl}
	mock.recorder = &MockGraphQuantityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphQuantity) EXPECT() *MockGraphQuantityMockRecorder {
	return m.recorder
}

// AddWeightedLine mocks base method.
func (m *MockGraphQuantity) AddWeightedLine(from, to services.QuantityNode, weight float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWeightedLine", from, to, weight)
}

// AddWeightedLine indicates an expected call of AddWeightedLine.
func (mr *MockGraphQuantityMockRecorder) AddWeightedLine(from, to, weight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWeightedLine", reflect.TypeOf((*MockGraphQuantity)(nil).AddWeightedLine), from, to, weight)
}

// ClosestCandidate mocks base method.
func (m *MockGraphQuantity) ClosestCandidate() services.QuantityNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosestCandidate")
	ret0, _ := ret[0].(services.QuantityNode)
	return ret0
}

// ClosestCandidate indicates an expected call of ClosestCandidate.
func (mr *MockGraphQuantityMockRecorder) ClosestCandidate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosestCandidate", reflect.TypeOf((*MockGraphQuantity)(nil).ClosestCandidate))
}

// GeneratePermutations mocks base method.
func (m *MockGraphQuantity) GeneratePermutations(node services.QuantityNode, sizes []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GeneratePermutations", node, sizes)
}

// GeneratePermutations indicates an expected call of GeneratePermutations.
func (mr *MockGraphQuantityMockRecorder) GeneratePermutations(node, sizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePermutations", reflect.TypeOf((*MockGraphQuantity)(nil).GeneratePermutations), node, sizes)
}

// HasWeightedLine mocks base method.
func (m *MockGraphQuantity) HasWeightedLine(from, to services.QuantityNode, weight float64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWeightedLine", from, to, weight)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasWeightedLine indicates an expected call of HasWeightedLine.
func (mr *MockGraphQuantityMockRecorder) HasWeightedLine(from, to, weight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWeightedLine", reflect.TypeOf((*MockGraphQuantity)(nil).HasWeightedLine), from, to, weight)
}

// PruneNodes mocks base method.
func (m *MockGraphQuantity) PruneNodes(candidate graph.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PruneNodes", candidate)
}

// PruneNodes indicates an expected call of PruneNodes.
func (mr *MockGraphQuantityMockRecorder) PruneNodes(candidate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneNodes", reflect.TypeOf((*MockGraphQuantity)(nil).PruneNodes), candidate)
}
